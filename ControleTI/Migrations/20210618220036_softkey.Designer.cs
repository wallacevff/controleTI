// <auto-generated />
using System;
using ControleTI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ControleTI.Migrations
{
    [DbContext(typeof(ControleTIContext))]
    [Migration("20210618220036_softkey")]
    partial class softkey
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ControleTI.Models.Dispositivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IdTipo");

                    b.Property<int>("IdUsuario");

                    b.Property<string>("MacAdress");

                    b.Property<string>("Nome");

                    b.Property<int?>("UsuarioId");

                    b.Property<int?>("tipoDispositivoId");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.HasIndex("tipoDispositivoId");

                    b.ToTable("Dispositivo");
                });

            modelBuilder.Entity("ControleTI.Models.Filial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("Filial");
                });

            modelBuilder.Entity("ControleTI.Models.SerialKey", b =>
                {
                    b.Property<int>("SoftwareId");

                    b.Property<string>("Key");

                    b.HasKey("SoftwareId", "Key");

                    b.HasAlternateKey("Key", "SoftwareId");

                    b.ToTable("SerialKey");
                });

            modelBuilder.Entity("ControleTI.Models.Setor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("Setor");
                });

            modelBuilder.Entity("ControleTI.Models.Software", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DispositivoId");

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.HasIndex("DispositivoId");

                    b.ToTable("Software");
                });

            modelBuilder.Entity("ControleTI.Models.TipoDispositivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Tipo");

                    b.HasKey("Id");

                    b.ToTable("TipoDispositivo");
                });

            modelBuilder.Entity("ControleTI.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FilialId");

                    b.Property<string>("NomeCompleto");

                    b.Property<string>("NomeUsu");

                    b.Property<int>("SetorId");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.HasIndex("SetorId");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("ControleTI.Models.Dispositivo", b =>
                {
                    b.HasOne("ControleTI.Models.Usuario", "Usuario")
                        .WithMany("Dispositivo")
                        .HasForeignKey("UsuarioId");

                    b.HasOne("ControleTI.Models.TipoDispositivo", "tipoDispositivo")
                        .WithMany()
                        .HasForeignKey("tipoDispositivoId");
                });

            modelBuilder.Entity("ControleTI.Models.SerialKey", b =>
                {
                    b.HasOne("ControleTI.Models.Software", "Software")
                        .WithMany("Keys")
                        .HasForeignKey("SoftwareId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ControleTI.Models.Software", b =>
                {
                    b.HasOne("ControleTI.Models.Dispositivo")
                        .WithMany("Softwares")
                        .HasForeignKey("DispositivoId");
                });

            modelBuilder.Entity("ControleTI.Models.Usuario", b =>
                {
                    b.HasOne("ControleTI.Models.Filial", "Filial")
                        .WithMany()
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ControleTI.Models.Setor", "Setor")
                        .WithMany("Usuarios")
                        .HasForeignKey("SetorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
